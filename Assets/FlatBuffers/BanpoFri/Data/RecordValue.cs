// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RecordValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static RecordValue GetRootAsRecordValue(ByteBuffer _bb) { return GetRootAsRecordValue(_bb, new RecordValue()); }
  public static RecordValue GetRootAsRecordValue(ByteBuffer _bb, RecordValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RecordValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Idx { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdxBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdxBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdxArray() { return __p.__vector_as_array<byte>(4); }
  public long Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateValue(long value) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, value); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.RecordValue> CreateRecordValue(FlatBufferBuilder builder,
      StringOffset idxOffset = default(StringOffset),
      long value = 0) {
    builder.StartTable(2);
    RecordValue.AddValue(builder, value);
    RecordValue.AddIdx(builder, idxOffset);
    return RecordValue.EndRecordValue(builder);
  }

  public static void StartRecordValue(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIdx(FlatBufferBuilder builder, StringOffset idxOffset) { builder.AddOffset(0, idxOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, long value) { builder.AddLong(1, value, 0); }
  public static Offset<BanpoFri.Data.RecordValue> EndRecordValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.RecordValue>(o);
  }
  public RecordValueT UnPack() {
    var _o = new RecordValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RecordValueT _o) {
    _o.Idx = this.Idx;
    _o.Value = this.Value;
  }
  public static Offset<BanpoFri.Data.RecordValue> Pack(FlatBufferBuilder builder, RecordValueT _o) {
    if (_o == null) return default(Offset<BanpoFri.Data.RecordValue>);
    var _idx = _o.Idx == null ? default(StringOffset) : builder.CreateString(_o.Idx);
    return CreateRecordValue(
      builder,
      _idx,
      _o.Value);
  }
}

public class RecordValueT
{
  [Newtonsoft.Json.JsonProperty("idx")]
  public string Idx { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public long Value { get; set; }

  public RecordValueT() {
    this.Idx = null;
    this.Value = 0;
  }
}


static public class RecordValueVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Idx*/, false)
      && verifier.VerifyField(tablePos, 6 /*Value*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
