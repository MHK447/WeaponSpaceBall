// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UpgradeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static UpgradeData GetRootAsUpgradeData(ByteBuffer _bb) { return GetRootAsUpgradeData(_bb, new UpgradeData()); }
  public static UpgradeData GetRootAsUpgradeData(ByteBuffer _bb, UpgradeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UpgradeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Upgradeidx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateUpgradeidx(int upgradeidx) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, upgradeidx); return true; } else { return false; } }
  public int Upgradelevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateUpgradelevel(int upgradelevel) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, upgradelevel); return true; } else { return false; } }
  public int Upgradeternallevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateUpgradeternallevel(int upgradeternallevel) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, upgradeternallevel); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.UpgradeData> CreateUpgradeData(FlatBufferBuilder builder,
      int upgradeidx = 0,
      int upgradelevel = 0,
      int upgradeternallevel = 0) {
    builder.StartTable(3);
    UpgradeData.AddUpgradeternallevel(builder, upgradeternallevel);
    UpgradeData.AddUpgradelevel(builder, upgradelevel);
    UpgradeData.AddUpgradeidx(builder, upgradeidx);
    return UpgradeData.EndUpgradeData(builder);
  }

  public static void StartUpgradeData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUpgradeidx(FlatBufferBuilder builder, int upgradeidx) { builder.AddInt(0, upgradeidx, 0); }
  public static void AddUpgradelevel(FlatBufferBuilder builder, int upgradelevel) { builder.AddInt(1, upgradelevel, 0); }
  public static void AddUpgradeternallevel(FlatBufferBuilder builder, int upgradeternallevel) { builder.AddInt(2, upgradeternallevel, 0); }
  public static Offset<BanpoFri.Data.UpgradeData> EndUpgradeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.UpgradeData>(o);
  }
  public UpgradeDataT UnPack() {
    var _o = new UpgradeDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UpgradeDataT _o) {
    _o.Upgradeidx = this.Upgradeidx;
    _o.Upgradelevel = this.Upgradelevel;
    _o.Upgradeternallevel = this.Upgradeternallevel;
  }
  public static Offset<BanpoFri.Data.UpgradeData> Pack(FlatBufferBuilder builder, UpgradeDataT _o) {
    if (_o == null) return default(Offset<BanpoFri.Data.UpgradeData>);
    return CreateUpgradeData(
      builder,
      _o.Upgradeidx,
      _o.Upgradelevel,
      _o.Upgradeternallevel);
  }
}

public class UpgradeDataT
{
  [Newtonsoft.Json.JsonProperty("upgradeidx")]
  public int Upgradeidx { get; set; }
  [Newtonsoft.Json.JsonProperty("upgradelevel")]
  public int Upgradelevel { get; set; }
  [Newtonsoft.Json.JsonProperty("upgradeternallevel")]
  public int Upgradeternallevel { get; set; }

  public UpgradeDataT() {
    this.Upgradeidx = 0;
    this.Upgradelevel = 0;
    this.Upgradeternallevel = 0;
  }
}


static public class UpgradeDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Upgradeidx*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Upgradelevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Upgradeternallevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
